package org.iu.engrcloudcomputing.mapreduce.hadoop.manager.impl;

import com.google.api.services.compute.model.Metadata;
import com.google.protobuf.ProtocolStringList;
import io.grpc.ManagedChannel;
import org.iu.engrcloudcomputing.mapreduce.hadoop.autogenerated.BeginMapReduceGrpc;
import org.iu.engrcloudcomputing.mapreduce.hadoop.autogenerated.Master;
import org.iu.engrcloudcomputing.mapreduce.hadoop.exception.MapReduceFailureException;
import org.iu.engrcloudcomputing.mapreduce.hadoop.helper.Constants;
import org.iu.engrcloudcomputing.mapreduce.hadoop.helper.GoogleComputeOps;
import org.iu.engrcloudcomputing.mapreduce.hadoop.manager.spi.HadoopManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.invoke.MethodHandles;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HadoopManagerImpl implements HadoopManager {

    private static final Logger LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getSimpleName());

    private static final String STARTUP_SCRIPT_URL_KEY = "startup-script-url";
    private static final String STARTUP_SCRIPT_URL_VALUE_MASTER = "gs://" + Constants.PROJECT_ID + "/vm_startup.sh";
    private static final String STARTUP_SCRIPT_URL_VALUE_KVSTORE = "gs://" + Constants.PROJECT_ID + "/kv_vm_startup.sh";
    private static final String PORT_KEY = "port";
    private static final String COMPONENT_NAME_KEY = "component";
    private static final String KV_STORE_KEY = "kv-store";
    private static final String MASTER_DETAILS_KEY = "master";
    private static final String UUID_KEY = "uuid";
    private static final String SCRIPT_KEY = "script";
    private static final String script = "run_master.sh";

    @Override
    public Map<String, String> initiateCluster(String kvStoreComponentName, String masterComponentName,
                                               int masterPort, int kvStorePort) throws IOException, GeneralSecurityException {

        Map<String, String> map = new HashMap<>();
        int status = -1;
        GoogleComputeOps gc = new GoogleComputeOps(kvStoreComponentName);

        while (status != 0) {
            status = gc.startInstance(getMetaDataForKVStore(kvStoreComponentName, kvStorePort), false);
        }

        map.put(kvStoreComponentName, gc.getIpAddressOfInstance());

        status = -1;
        gc = new GoogleComputeOps(masterComponentName);

        while (status != 0) {
            status = gc.startInstance(getMetaDataForMaster(masterComponentName, masterPort), false);
        }

        map.put(masterComponentName, gc.getIpAddressOfInstance());

        return map;
    }

    @Override
    public List<String> runMapReduce(ManagedChannel channel, String kvStoreIpAddress, int kvStorePort, String masterIpAddress,
                                     int masterPort, int mapperCount, int reducerCount, String mapperJar, String reducerJar,
                                     String initialKey) {

        BeginMapReduceGrpc.BeginMapReduceBlockingStub blockingStub = BeginMapReduceGrpc.newBlockingStub(channel);

        Master.MapReduceResponse mapReduceResponse = blockingStub.mapReduce(Master.MapReduceParams.newBuilder().setInitialKey(initialKey)
                .setMapperJar(mapperJar)
                .setMappers(mapperCount)
                .setReducerJar(reducerJar)
                .setReducers(reducerCount)
                .setKvStoreIpAddress(kvStoreIpAddress)
                .setMasterIpAddress(masterIpAddress)
                .setMasterPort(masterPort)
                .setKvStorePort(kvStorePort).build());

        Master.Message message = mapReduceResponse.getMessage();

        int responseCode = message.getResponseCode();
        if (responseCode != 200) {
            LOGGER.error("MapReduce task failed with status: {}", responseCode);
            throw new MapReduceFailureException("Map Reduce Task failed");
        }

        ProtocolStringList keyList = mapReduceResponse.getKeys().getKeyList();
        LOGGER.info("Map Reduce Task was successful ");

        return new ArrayList<>(keyList);
    }

    @Override
    public boolean destroyCluster(String kvStoreComponentName, String masterComponentName) {

        LOGGER.info("Shutting down the instances, master: {}, kvstore: {}", masterComponentName, kvStoreComponentName);

        int status = -1;
        GoogleComputeOps gc = new GoogleComputeOps(masterComponentName);

        while (status != 0) {
            status = gc.deleteInstance();
        }

        status = -1;
        gc = new GoogleComputeOps(kvStoreComponentName);

        while (status != 0) {
            status = gc.deleteInstance();
        }

        return true;
    }

    private Metadata getMetaDataForKVStore(String componentName, int port) {

        Metadata metadata = new Metadata();
        List<Metadata.Items> itemsList = new ArrayList<>();
        itemsList.add(getItem(STARTUP_SCRIPT_URL_KEY, STARTUP_SCRIPT_URL_VALUE_KVSTORE));
        itemsList.add(getItem(COMPONENT_NAME_KEY, componentName));
        itemsList.add(getItem(PORT_KEY, String.valueOf(port)));
        metadata.setItems(itemsList);
        return metadata;
    }

    private Metadata getMetaDataForMaster(String componentName, int port) {

        Metadata metadata = new Metadata();
        List<Metadata.Items> itemsList = new ArrayList<>();
        itemsList.add(getItem(STARTUP_SCRIPT_URL_KEY, STARTUP_SCRIPT_URL_VALUE_MASTER));
        itemsList.add(getItem(KV_STORE_KEY, "1:1"));
        itemsList.add(getItem(MASTER_DETAILS_KEY, "1:" + port));
        itemsList.add(getItem(UUID_KEY, componentName));
        itemsList.add(getItem(COMPONENT_NAME_KEY, componentName));
        itemsList.add(getItem(SCRIPT_KEY, script));
        metadata.setItems(itemsList);
        return metadata;
    }

    private Metadata.Items getItem(String key, String value) {
        Metadata.Items item = new Metadata.Items();
        item.setKey(key);
        item.setValue(value);

        return item;
    }
}
