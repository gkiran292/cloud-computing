package org.iu.engrcloudcomputing.mapreduce.mapred.master.impl;

import com.google.protobuf.ProtocolStringList;
import io.grpc.stub.StreamObserver;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.Master;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.ReducerAckGrpc;
import org.iu.engrcloudcomputing.mapreduce.mapred.dto.TaskInfo;
import org.iu.engrcloudcomputing.mapreduce.mapred.helper.HelperMethod;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.invoke.MethodHandles;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CountDownLatch;

public class ReducerAckService extends ReducerAckGrpc.ReducerAckImplBase {

    private static final Logger LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getSimpleName());
    private ConcurrentMap<String, String> reducerKVConcurrentMap;
    private ConcurrentMap<String, TaskInfo> taskInfoConcurrentMap;

    public ReducerAckService(ConcurrentMap<String, String> reducerKVConcurrentMap,
                             ConcurrentMap<String, TaskInfo> taskInfoConcurrentMap) {
        this.reducerKVConcurrentMap = reducerKVConcurrentMap;
        this.taskInfoConcurrentMap = taskInfoConcurrentMap;
    }

    @Override
    public void reduceKeys(Master.Keys request, StreamObserver<Master.Message> responseObserver) {

        ProtocolStringList keyList = request.getKeyList();
        boolean status = HelperMethod.handleRequest(keyList, responseObserver, reducerKVConcurrentMap, taskInfoConcurrentMap);

        if (!status) {
            LOGGER.warn("Rejected request for reducer id: {}", keyList.get(0).split("_")[0]);
            return;
        }

        LOGGER.info("Acknowledged and results are stored from Reducer: {}", keyList.get(0).split("_")[0]);

//        if (!status) {
//            responseObserver.onNext(Master.Message.newBuilder().setResponseCode(400).setResponseMessage("NOT INITIATED").build());
//            responseObserver.onCompleted();
//            return;
//        }
//        String uuid = keyList.get(0).split("_")[0];
//        if (!uuidMap.containsKey(uuid) || countDownLatch.getCount() < 1) {
//            responseObserver.onNext(Master.Message.newBuilder().setResponseCode(400).setResponseMessage("NOT INITIATED").build());
//            responseObserver.onCompleted();
//            return;
//        }
//
//        countDownLatch.countDown();
//        HelperMethod.storeKeys(reducerKVConcurrentMap, keyList);
//
//        LOGGER.info("Acknowledged and results are stored from Reducer: {}", keyList.get(0).split("_")[0]);
//        responseObserver.onNext(Master.Message.newBuilder().setResponseCode(200).setResponseMessage("OK").build());
//        responseObserver.onCompleted();
    }
}
