package org.iu.engrcloudcomputing.mapreduce.mapred.helper;

import com.google.protobuf.ProtocolStringList;
import io.grpc.stub.StreamObserver;
import org.apache.commons.lang3.StringUtils;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.Master;
import org.iu.engrcloudcomputing.mapreduce.mapred.dto.TaskInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.invoke.MethodHandles;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CountDownLatch;

public class HelperMethod {

    private static final Logger LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getSimpleName());

    public static boolean handleRequest(ProtocolStringList keyList, StreamObserver<Master.Message> responseObserver,
                                        ConcurrentMap<String, String> kvMap, ConcurrentMap<String, TaskInfo> taskInfoConcurrentMap) {

        String uuid = keyList.get(0).split("_")[0];
        if (!taskInfoConcurrentMap.containsKey(uuid)) {
            responseObserver.onNext(Master.Message.newBuilder().setResponseCode(400).setResponseMessage("NOT INITIATED").build());
            responseObserver.onCompleted();
            return false;
        }

        if (!taskInfoConcurrentMap.get(uuid).getIsTaskFinished()) {
            storeKeys(kvMap, keyList);
        }

        responseObserver.onNext(Master.Message.newBuilder().setResponseCode(200).setResponseMessage("OK").build());
        responseObserver.onCompleted();
        return true;
    }

    private static void storeKeys(ConcurrentMap<String, String> concurrentMap, ProtocolStringList keyList) {

        for (String key : keyList) {
            key = StringUtils.trim(key);
            String[] split = key.split("_");
            try {
                LOGGER.debug("Task id: {}, Key: {}", split[0], split[1]);
                concurrentMap.put(key, key);
            } catch (ArrayIndexOutOfBoundsException e) {
                LOGGER.warn("No Key present (improve mapper... unnecessarily consuming bandwidth) task_id: {}", split[0]);
            }
        }
    }
}
